{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(ggiraph)\n\n\nref=read.csv(\"ref.csv\")\n\nshinyServer(function(input, output,session) {\n    \n    \n    size.t.test=function(meandiff,sd=NULL,sdA=NULL,sdB=NULL,alpha,beta,delta,kappa,mode=1){\n        if(mode==1){\n            nB=(1+1/kappa)*(sd*(qnorm(1-alpha/2)+qnorm(1-beta))/(meandiff))^2\n        } else if(mode==2){\n            nA=(sdA^2+sdB^2/kappa)*((qnorm(1-alpha)+qnorm(1-beta))/(meandiff))^2\n            nB=nA/kappa\n        } else if(mode==3){\n            nB=(1+1/kappa)*(sd*(qnorm(1-alpha)+qnorm(1-beta))/(meandiff-delta))^2\n        } else {\n            nB=(1+1/kappa)*(sd*(qnorm(1-alpha)+qnorm(1-beta/2))/(abs(meandiff)-delta))^2\n        }\n    }\n    \n    size.anova.test=function(meandiff,sd=NULL,sdA=NULL,sdB=NULL,alpha,beta,tau,kappa,mode=1){\n        if(mode==1){\n            n=2*(sd*(qnorm(1-alpha/(2/tau))+qnorm(1-beta))/(meandiff))^2\n        } else{\n            n=(sdA^2+sdB^2/kappa)*((qnorm(1-alpha/tau)+qnorm(1-beta))/(meandiff))^2\n        }\n        n\n    }\n    \n    \n    size.t1.prop=function(p,p0,delta,alpha=alpha,beta,mode){\n        if(mode==1){\n            n=p*(1-p)*((qnorm(1-alpha/2)+qnorm(1-beta))/(p-p0))^2\n        } else if(mode==2){\n            n=p0*(1-p0)*((qnorm(1-alpha)+qnorm(1-beta)*sqrt(p*(1-p)/p0/(1-p0)))/(p-p0))^2\n        } else if(mode==3){\n            n=p*(1-p)*((qnorm(1-alpha)+qnorm(1-beta))/(p-p0-delta))^2\n        } else {\n            n=p*(1-p)*((qnorm(1-alpha)+qnorm(1-beta/2))/(abs(p-p0)-delta))^2\n        }\n        n\n    }\n    \n    size.compare.2prop=function(pA,pB,delta,kappa,alpha,beta,mode){\n        if(mode==1){\n            nB=(pA*(1-pA)/kappa+pB*(1-pB))*((qnorm(1-alpha/2)+qnorm(1-beta))/(pA-pB))^2\n        } else if(mode==2){\n            nB=(pA*(1-pA)/kappa+pB*(1-pB))*((qnorm(1-alpha)+qnorm(1-beta))/(pA-pB))^2\n        } else if(mode==3){\n            nB=(pA*(1-pA)/kappa+pB*(1-pB))*((qnorm(1-alpha)+qnorm(1-beta))/(pA-pB-delta))^2\n        } else{\n            nB=(pA*(1-pA)/kappa+pB*(1-pB))*((qnorm(1-alpha)+qnorm(1-beta/2))/(abs(pA-pB)-delta))^2\n        }\n        nB\n    }\n    \n    \n    size.compare.kp=function(pA,pB,tau,alpha,beta,mode){\n        n=(pA*(1-pA)+pB*(1-pB))*((qnorm(1-alpha/2/tau)+qnorm(1-beta))/(pA-pB))^2\n        n\n    }\n    \n    size.cox.ph=function(hr,hr0,pE,pA,alpha,beta,delta,mode){\n        if(mode==1){\n           n=((qnorm(1-alpha/2)+qnorm(1-beta))/(log(hr)-log(hr0)))^2/(pA*(1-pA)*pE)\n        } else if(mode==2){\n            n=((qnorm(1-alpha)+qnorm(1-beta))/(log(hr)-log(hr0)))^2/(pA*(1-pA)*pE)\n        } else{\n            n=((qnorm(1-alpha)+qnorm(1-beta/2))/(delta-abs(log(hr))))^2/(pA*(1-pA)*pE)\n        }\n        n\n    }\n    \n    size.odds.ratio=function(pA,pB,alpha,beta,delta,kappa,mode){\n        OR=pA*(1-pB)/pB/(1-pA) \n        if(mode==1){\n            nB=(1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))*((qnorm(1-alpha/2)+qnorm(1-beta))/log(OR))^2\n        } else if(mode==2){\n            nB=(1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))*((qnorm(1-alpha)+qnorm(1-beta))/(log(OR)-delta))^2\n        } else {\n            nB=(1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))*((qnorm(1-alpha)+qnorm(1-beta/2))/(abs(log(OR))-delta))^2\n        }\n        nB\n    }\n    \n    size.oddsratio=reactive({\n        pA<-input$pA9\n        pB<-input$pB9\n        alpha<-input$alpha9\n        beta<-1-input$power9\n        delta<-input$delta9\n        kappa<-input$k9\n        mode<-as.numeric(input$oddratio)\n        \n        n<-size.odds.ratio(pA,pB,alpha,beta,delta,kappa,mode)\n        n\n        \n    })\n    \n    size.coxph=reactive({\n        hr<-input$hr\n        hr0<-input$hr0\n        pE<-input$pE\n        pA<-input$pA8\n        alpha<-input$alpha8\n        beta<-1-input$power8\n        delta<-input$delta8\n        mode<-as.numeric(input$coxph)\n        \n        n=size.cox.ph(hr,hr0,pE,pA,alpha,beta,delta,mode)\n        n\n        \n        \n    })\n    \n    size.ckp=reactive({\n        pA=input$pA7\n        pB=input$pB7\n        tau<-input$tau7\n        alpha<-input$alpha7\n        beta<- 1-input$power7\n        \n        n=size.compare.kp(pA,pB,tau,alpha,beta,mode)\n        n\n    })\n    \n    size.c2p=reactive({\n        pA=input$pA\n        pB=input$pB\n        delta=input$delta5\n        kappa=input$k5\n        alpha=input$alpha5\n        beta=1-input$power5\n        mode=as.numeric(input$c2p)\n        \n        nB=size.compare.2prop(pA,pB,delta,kappa,alpha,beta,mode)\n        nB\n    })\n    \n    size.compare.pp=function(proportions,alpha,beta,mode){\n        proportions=proportions/sum(proportions)\n        p01=proportions[3]\n        p10=proportions[2]\n        pdisc=p10+p01\n        pdiff=p10-p01\n        \n        if(mode==1){\n            n=((qnorm(1-alpha/2)*sqrt(pdisc)+qnorm(1-beta)*sqrt(pdisc-pdiff^2))/pdiff)^2\n        } else{\n            n=((qnorm(1-alpha)*sqrt(pdisc)+qnorm(1-beta)*sqrt(pdisc-pdiff^2))/pdiff)^2\n        }\n        n\n    }\n    \n    size.cpp=reactive({\n        n11<-input$n11\n        n10<-input$n10\n        n01<-input$n01\n        n00<-input$n00\n        \n        proportions=c(n11,n10,n01,n00)\n       \n        alpha<-input$alpha6\n        beta<-1-input$power6\n        mode<-as.numeric(input$cpp)\n        n=size.compare.pp(proportions,alpha,beta,mode=mode)\n        n\n        \n    })\n    \n    size.t1p=reactive({\n        \n        p=input$prop\n        p0=input$prop0\n        delta=input$delta4\n        alpha=input$alpha4\n        beta=1-input$power4\n        mode=as.numeric(input$t1p)\n        \n        n=size.t1.prop(p=p,p0=p0,delta=delta,alpha=alpha,beta=beta,mode=mode)\n        n\n    })\n    \n    size.anova=reactive({\n        \n        muA=input$mean31\n        muB=input$mean32\n        sd=input$sd3\n        sdA=input$sd31\n        sdB=input$sd32\n        tau=input$tau\n        alpha=input$alpha3\n        beta=1-input$power3\n        power=input$power3\n        kappa=input$kappa3\n        mode=as.numeric(input$anova)\n        n=size.anova.test(meandiff=muA-muB,sd=sd,sdA=sdA,sdB=sdB,\n                       alpha=alpha,beta=beta,tau=tau,kappa=kappa,mode=mode)\n        n\n    })\n    \n    size.ttest=reactive({\n        \n        muA=input$mean1\n        muB=input$mean2\n        sd=input$sd\n        sdA=input$sd1\n        sdB=input$sd2\n        kappa=input$k\n        alpha=input$alpha\n        beta=1-input$power\n        power=input$power\n        delta=input$margin\n        mode=as.numeric(input$ttest)\n        nB=size.t.test(meandiff=muA-muB,sd=sd,sdA=sdA,sdB=sdB,\n                       alpha=alpha,beta=beta,delta=delta,kappa=kappa,mode=mode)\n        nB\n    })\n    \n    \n    size.t1.mean=function(meandiff,sd,alpha,beta,delta,mode){\n        if(mode==1){\n          n=(sd*(qnorm(1-alpha/2)+qnorm(1-beta))/(meandiff))^2\n        } else if(mode==2){\n            n=(sd*(qnorm(1-alpha)+qnorm(1-beta))/(meandiff))^2\n        } else if(mode==3){\n            n=(sd*(qnorm(1-alpha)+qnorm(1-beta))/(meandiff-delta))^2\n        } else{\n            n=(sd*(qnorm(1-alpha)+qnorm(1-beta/2))/(delta-abs(meandiff)))^2\n        }\n        n\n    }\n    size.t1mean=reactive({\n        \n        mu=input$mu\n        mu0=input$mu0\n        sd=input$sd0\n        alpha=input$alpha1\n        beta=1-input$power1\n        power=input$power1\n        delta=input$delta\n        mode=as.numeric(input$t1mean)\n        n=size.t1.mean(meandiff=mu-mu0,sd=sd,\n                       alpha=alpha,beta=beta,delta=delta,mode=mode)\n        n\n    })\n    \n    output$sampleSize1=renderValueBox({\n        \n        n<-size.t1mean()\n        valueBox(\n            round(n,2),\"Sample Size\",icon=icon(\"user\"),color=\"yellow\"\n        )\n    })\n    \n    output$sampleSize12=renderValueBox({\n        \n        n<-size.t1mean()\n        n1<-ceiling(n/(1-input$FUloss1)/input$compliance1)\n        valueBox(\n            n1,\"Sample Size considering FU loss and compliance\",\n            icon=icon(\"users\"),color=\"purple\"\n        )\n    })\n\n    \n   output$sampleSize=renderValueBox({\n        \n        nB<-size.ttest()\n        valueBox(\n            round(nB,2),\"Sample Size, nB\",icon=icon(\"user-plus\"),color=\"yellow\"\n        )\n    })\n    \n    output$sampleSize2=renderValueBox({\n        nB<-size.ttest()\n        nA<-input$k*nB\n        valueBox(\n            round(nA,2),\"Sample Size, nA\",icon=icon(\"user\"),color=\"yellow\"\n        )\n    })\n    \n    output$sampleSize3=renderValueBox({\n        nB<-size.ttest()\n        nA<-input$k*nB\n        temp=paste0(ceiling(nB/(1-input$FUloss)/input$compliance),\"/\",\n                    ceiling(nA/(1-input$FUloss)/input$compliance))\n        valueBox(\n            temp,\"nA/nB considering FU loss and compliance\",icon=icon(\"users\"),color=\"purple\"\n        )\n    })\n    \n    output$sampleSize31=renderValueBox({\n        nA<-size.anova()\n        temp=ceiling(nA)\n        temp2=\"Sample size\"\n        if(as.numeric(input$anova)==2){\n            nB<-nA/input$k\n            temp=paste0(ceiling(nA),\"/\",ceiling(nB))\n            temp2=(\"nA/nB\")\n        } \n        #temp=paste0(ceiling(nB/(1-input$FUloss)/input$compliance),\"/\",\n        #            ceiling(nA/(1-input$FUloss)/input$compliance))\n        valueBox(\n            temp,temp2,icon=icon(\"user\"),color=\"yellow\"\n        )\n    })\n    \n    output$sampleSize32=renderValueBox({\n        nA<-size.anova()\n        temp=ceiling(nA/(1-input$FUloss3)/input$compliance3)\n        temp2=\"Sample size\"\n        if(as.numeric(input$anova)==2){\n            nB<-nA/input$k\n            temp=paste0(ceiling(nA/(1-input$FUloss3)/input$compliance3),\"/\",\n                    ceiling(nB/(1-input$FUloss3)/input$compliance3))\n            temp2=\"nA/nB\"\n        }\n        valueBox(\n            temp,paste(temp2,\"considering FU loss and compliance\"),icon=icon(\"users\"),color=\"purple\"\n        )\n    })\n    \n    output$sampleSize41=renderValueBox({\n        n<-size.t1p()\n        n<-ceiling(n)\n        valueBox(\n            n,paste(\"Sample size, n\"),icon=icon(\"user\"),color=\"yellow\"\n        )\n    })\n    \n    output$sampleSize42=renderValueBox({\n        n<-size.t1p()\n        n=ceiling(n/(1-input$FUloss4)/input$compliance4)\n        valueBox(\n            n,\"Sample size considering FU loss and compliance\",icon=icon(\"users\"),color=\"purple\"\n        )\n    })\n    \n    output$sampleSize51=renderValueBox({\n        nB<-size.c2p()\n        nA=ceiling(nB*input$k5)\n        valueBox(\n            nA,paste(\"Sample size, nA\"),icon=icon(\"user\"),color=\"yellow\"\n        )\n    })\n    \n    output$sampleSize52=renderValueBox({\n        nB<-size.c2p()\n        nB<-ceiling(nB)\n        valueBox(\n            nB,paste(\"Sample size, nB\"),icon=icon(\"user-plus\"),color=\"yellow\"\n        )\n    })\n    \n    output$sampleSize53=renderValueBox({\n        nB<-size.c2p()\n        nA=nB*input$k5\n        nB=ceiling(nB/(1-input$FUloss5)/input$compliance5)\n        nA=ceiling(nA/(1-input$FUloss5)/input$compliance5)\n        valueBox(\n            paste0(nA,\"/\",nB),\"nA/nB considering FU loss and compliance\",\n            icon=icon(\"users\"),color=\"purple\"\n        )\n    })\n    \n    output$sampleSize61=renderValueBox({\n        n<-size.cpp()\n        n=ceiling(n)\n        valueBox(\n            n,paste(\"Sample size, n\"),icon=icon(\"user\"),color=\"yellow\"\n        )\n    })\n    \n    \n    output$sampleSize63=renderValueBox({\n        n<-size.cpp()\n        n=ceiling(n/(1-input$FUloss6)/input$compliance6)\n        \n        valueBox(\n            n,\"Sample size considering FU loss and compliance\",\n            icon=icon(\"users\"),color=\"purple\"\n        )\n    })\n    \n    output$sampleSize71=renderValueBox({\n        n<-size.ckp()\n        n=ceiling(n)\n        valueBox(\n            n,paste(\"Sample size, n\"),icon=icon(\"user\"),color=\"yellow\"\n        )\n    })\n    \n    \n    output$sampleSize73=renderValueBox({\n        n<-size.ckp()\n        n=ceiling(n/(1-input$FUloss7)/input$compliance7)\n        \n        valueBox(\n            n,\"Sample size considering FU loss and compliance\",\n            icon=icon(\"users\"),color=\"purple\"\n        )\n    })\n    \n    output$sampleSize81=renderValueBox({\n        n<-size.coxph()\n        n=ceiling(n)\n        valueBox(\n            n,paste(\"Sample size, n\"),icon=icon(\"user\"),color=\"yellow\"\n        )\n    })\n    \n    \n    output$sampleSize83=renderValueBox({\n        n<-size.coxph()\n        n=ceiling(n/(1-input$FUloss8)/input$compliance8)\n        \n        valueBox(\n            n,\"Sample size considering FU loss and compliance\",icon=icon(\"users\"),color=\"purple\"\n        )\n    })\n    \n    output$sampleSize91=renderValueBox({\n        nB<-size.oddsratio()\n        nA=ceiling(nB*input$k9)\n        valueBox(\n            nA,paste(\"Sample size, nA\"),icon=icon(\"user\"),color=\"yellow\"\n        )\n    })\n    \n    output$sampleSize92=renderValueBox({\n        nB<-size.oddsratio()\n        nB<-ceiling(nB)\n        valueBox(\n            nB,paste(\"Sample size, nB\"),icon=icon(\"user-plus\"),color=\"yellow\"\n        )\n    })\n    \n    output$sampleSize93=renderValueBox({\n        nB<-size.oddsratio()\n        nA=nB*input$k9\n        nB=ceiling(nB/(1-input$FUloss9)/input$compliance9)\n        nA=ceiling(nA/(1-input$FUloss9)/input$compliance9)\n        valueBox(\n            paste0(nA,\"/\",nB),\"nA/nB considering FU loss and compliance\",\n            icon=icon(\"users\"),color=\"purple\"\n        )\n    })\n    output$plot1=renderPlotly({\n        \n        muA=input$mean1\n        muB=input$mean2\n        sd=input$sd\n        sdA=input$sd1\n        sdB=input$sd2\n        kappa=input$k\n        alpha=input$alpha\n        #power=input$power\n        delta=input$margin\n        mode=as.numeric(input$ttest)\n        \n        power=seq(0.5,0.95,by=0.01)\n        beta=1-power\n        \n        nB=size.t.test(meandiff=muA-muB,sd=sd,sdA=sdA,sdB=sdB,\n                       alpha=alpha,beta=beta,delta=delta,kappa=kappa,mode=mode)\n        \n        df=data.frame(power=power,n=nB)\n       \n        # power1<-input$power\n        # beta1<-1-power1\n        # nB1<-size.t.test(meandiff=muA-muB,sd=sd,sdA=sdA,sdB=sdB,\n        #                  alpha=alpha,beta=beta1,delta=delta,kappa=kappa,mode=mode)\n        \n        p<-ggplot(df,aes(power,n))+geom_line()+labs(x=\"power\",y=\"Sample Size\")\n            # geom_segment(x=0.5,xend=power1,y=nB1,yend=nB1,color=\"red\",linetype=2)+\n            # geom_segment(x=power1,xend=power1,y=min(df$n),yend=nB1,color=\"red\",linetype=2)+\n            # annotate(\"text\",x=(0.5+power1)/2,y=nB1,label=round(nB1,4),vjust=-1.2)\n        \n        ggplotly(p)\n        \n            \n    })\n    \n    output$plot2=renderPlotly({\n        \n        mu=input$mu\n        mu0=input$mu0\n        sd=input$sd0\n        alpha=input$alpha1\n        # beta=1-input$power1\n        # power=input$power1\n        delta=input$delta\n        mode=as.numeric(input$t1mean)\n       \n        power=seq(0.5,0.95,by=0.01)\n        beta=1-power\n        \n        \n         nB=size.t1.mean(meandiff=mu-mu0,sd=sd,\n                       alpha=alpha,beta=beta,delta=delta,mode=mode)\n        nB\n        \n        df=data.frame(power=power,n=nB)\n        \n        ggplotly(ggplot(df,aes(power,nB))+geom_line()+labs(x=\"power\",y=\"Sample Size\"))\n        \n        \n    })\n    \n    output$plot3=renderPlotly({\n        \n        muA=input$mean31\n        muB=input$mean32\n        sd=input$sd3\n        sdA=input$sd31\n        sdB=input$sd32\n        tau=input$tau\n        alpha=input$alpha3\n        # beta=1-input$power3\n        # power=input$power3\n        kappa=input$kappa3\n        mode=as.numeric(input$anova)\n        \n        power=seq(0.5,0.95,by=0.01)\n        beta=1-power\n        \n        n=size.anova.test(meandiff=muA-muB,sd=sd,sdA=sdA,sdB=sdB,\n                          alpha=alpha,beta=beta,tau=tau,kappa=kappa,mode=mode)\n        n\n        \n        df=data.frame(power=power,n=n)\n        \n        ggplotly(ggplot(df,aes(power,n))+geom_line()+labs(x=\"power\",y=\"Sample Size\"))\n        \n        \n    })\n    \n    output$plot4=renderPlotly({\n        \n        p=input$prop\n        p0=input$prop0\n        delta=input$delta4\n        alpha=input$alpha4\n        #beta=1-input$power4\n        mode=as.numeric(input$t1p)\n        \n        power=seq(0.5,0.95,by=0.01)\n        beta=1-power\n        \n        n=size.t1.prop(p=p,p0=p0,delta=delta,alpha=alpha,beta=beta,mode=mode)\n        n\n        \n        df=data.frame(power=power,n=n)\n        \n        ggplotly(ggplot(df,aes(power,n))+geom_line()+labs(x=\"power\",y=\"Sample Size\"))\n        \n        \n    })\n    \n    output$plot5=renderPlotly({\n        \n        pA=input$pA\n        pB=input$pB\n        delta=input$delta5\n        kappa=input$k5\n        alpha=input$alpha5\n        #beta=1-input$power5\n        mode=as.numeric(input$c2p)\n        \n        power=seq(0.5,0.95,by=0.01)\n        beta=1-power\n        \n        nB=size.compare.2prop(pA,pB,delta,kappa,alpha,beta,mode)\n        \n        \n        df=data.frame(power=power,nB=nB)\n        \n        ggplotly(ggplot(df,aes(power,nB))+geom_line()+labs(x=\"power\",y=\"Sample Size\"))\n        \n        \n    })\n    \n    output$plot6=renderPlotly({\n        \n        n11<-input$n11\n        n10<-input$n10\n        n01<-input$n01\n        n00<-input$n00\n        \n        proportions=c(n11,n10,n01,n00)\n        \n        alpha<-input$alpha6\n        #beta<-1-input$power6\n        mode<-as.numeric(input$cpp)\n         \n        power=seq(0.5,0.95,by=0.01)\n        beta=1-power\n        \n        n=size.compare.pp(proportions,alpha,beta,mode=mode)\n        \n        df=data.frame(power=power,n=n)\n        \n        ggplotly(ggplot(df,aes(power,n))+geom_line()+labs(x=\"power\",y=\"Sample Size\"))\n        \n        \n    })\n    \n    output$plot7=renderPlotly({\n        \n        pA=input$pA7\n        pB=input$pB7\n        tau<-input$tau7\n        alpha<-input$alpha7\n        #beta<- 1-input$power7\n        \n        power=seq(0.5,0.95,by=0.01)\n        beta=1-power\n        \n        n=size.compare.kp(pA,pB,tau,alpha,beta,mode)\n        \n        df=data.frame(power=power,n=n)\n        \n        ggplotly(ggplot(df,aes(power,n))+geom_line()+labs(x=\"power\",y=\"Sample Size\"))\n        \n        \n    })\n    output$plot8=renderPlotly({\n        \n        hr<-input$hr\n        hr0<-input$hr0\n        pE<-input$pE\n        pA<-input$pA8\n        alpha<-input$alpha8\n        #beta<-1-input$power8\n        delta<-input$delta8\n        mode<-as.numeric(input$coxph)\n        \n        \n        power=seq(0.5,0.95,by=0.01)\n        beta=1-power\n        \n        n=size.cox.ph(hr,hr0,pE,pA,alpha,beta,delta,mode)\n        \n        df=data.frame(power=power,n=n)\n        \n        ggplotly(ggplot(df,aes(power,n))+geom_line()+labs(x=\"power\",y=\"Sample Size\"))\n        \n        \n    })\n    \n    output$plot9=renderPlotly({\n        \n        pA<-input$pA9\n        pB<-input$pB9\n        alpha<-input$alpha9\n        #beta<-1-input$power9\n        delta<-input$delta9\n        kappa<-input$k9\n        mode<-as.numeric(input$oddratio)\n       \n        power=seq(0.5,0.95,by=0.01)\n        beta=1-power\n        \n        nB<-size.odds.ratio(pA,pB,alpha,beta,delta,kappa,mode)\n        \n        df=data.frame(power=power,n=nB)\n        \n        # power1<-input$power9\n        # beta1<-1-power1\n        # nB1<-size.odds.ratio(pA,pB,alpha,beta1,delta,kappa,mode)\n        \n        p<-ggplot(df,aes(power,n))+\n            geom_line()+labs(x=\"power\",y=\"Sample Size\")\n            # geom_segment(x=0.5,xend=power1,y=nB1,yend=nB1,color=\"red\",linetype=2)+\n            # geom_segment(x=power1,xend=power1,y=min(df$n),yend=nB1,color=\"red\",linetype=2)+\n            # annotate(\"text\",x=(0.5+power1)/2,y=nB1,label=round(nB1,4),vjust=-1.2)\n        ggplotly(p)\n    \n        \n        \n    })\n    \n    output$equation1=renderPrint({\n        filename=paste0(input$t1mean,\".png\")\n        img(src=filename)\n        \n    })\n    \n    output$ref1=renderPrint({\n        mode=as.numeric(input$t1mean)\n        temp=ref[ref$no==mode,]$ref\n        p(temp)\n    })\n    output$equation2=renderPrint({\n        filename=paste0(\"2\",input$ttest,\".png\")\n        img(src=filename)\n        \n    })\n    \n    output$ref2=renderPrint({\n        mode=as.numeric(input$ttest)+20\n        temp=ref[ref$no==mode,]$ref\n        p(temp)\n    })\n    output$equation3=renderPrint({\n        filename=paste0(\"3\",input$anova,\".png\")\n        img(src=filename)\n        \n    })\n    \n    output$ref3=renderPrint({\n        mode=as.numeric(input$anova)+30\n        temp=ref[ref$no==mode,]$ref\n        p(temp)\n    })\n    \n    output$equation4=renderPrint({\n        filename=paste0(\"4\",input$t1p,\".png\")\n        img(src=filename)\n        \n    })\n    \n    output$ref4=renderPrint({\n        mode=as.numeric(input$t1p)+40\n        temp=ref[ref$no==mode,]$ref\n        p(temp)\n    })\n    \n    output$equation5=renderPrint({\n        filename=paste0(\"5\",input$c2p,\".png\")\n        img(src=filename)\n        \n    })\n    \n    output$ref5=renderPrint({\n        mode=as.numeric(input$c2p)+50\n        temp=ref[ref$no==mode,]$ref\n        p(temp)\n    })\n    output$equation6=renderPrint({\n        filename=paste0(\"6\",input$cpp,\".png\")\n        img(src=filename)\n        \n    })\n    \n    output$ref6=renderPrint({\n        mode=as.numeric(input$cpp)+60\n        temp=ref[ref$no==mode,]$ref\n        p(temp)\n    })\n    \n    output$equation7=renderPrint({\n        filename=paste0(\"71.png\")\n        img(src=filename)\n        \n    })\n    \n    output$ref7=renderPrint({\n        mode=71\n        temp=ref[ref$no==mode,]$ref\n        p(temp)\n    })\n    \n    output$equation8=renderPrint({\n        filename=paste0(\"8\",input$coxph,\".png\")\n        img(src=filename)\n        \n    })\n    \n    output$ref8=renderPrint({\n        mode=as.numeric(input$coxph)+80\n        temp=ref[ref$no==mode,]$ref\n        p(temp)\n    })\n    \n    output$equation9=renderPrint({\n        filename=paste0(\"9\",input$oddratio,\".png\")\n        img(src=filename)\n        \n    })\n    \n    output$ref9=renderPrint({\n        mode=as.numeric(input$oddratio)+90\n        temp=ref[ref$no==mode,]$ref\n        p(temp)\n    })\n    \n    output$about=renderPrint({\n        includeMarkdown(\"readme.md\")\n    })\n\n})\n",
    "created" : 1479992383472.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2796300454",
    "id" : "81F116F4",
    "lastKnownWriteTime" : 1480217825,
    "last_content_update" : 1480217825335,
    "path" : "~/ownCloud/Documents/SampleSize/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}